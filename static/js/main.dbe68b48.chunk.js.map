{"version":3,"sources":["AppOne.js","AppTwo.js","App.js","reportWebVitals.js","index.js"],"names":["AppOne","ga","useGA4React","onClick","event","category","action","alert","AppTwo","ga4react","GA4React","App","useState","setGA","useEffect","initialize","then","res","console","log","catch","err","finally","pageview","window","location","pathname","search","gtag","className","href","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAwBeA,MArBf,WACE,IAAMC,EAAKC,cAWX,OACE,6CAEE,uBACA,wBAAQC,QAdS,WACnBF,EAAGG,MAAM,CACPC,SAAU,SACVC,OAAQ,qCAEVC,MACE,6EAQA,uBCbSC,MAJf,WACE,OAAO,+CCIHC,G,MAAW,IAAIC,IAAS,iBAuDfC,MArDf,WAAgB,IAAD,EACOC,qBADP,mBACNX,EADM,KACFY,EADE,KA4Bb,OAxBAC,qBAAU,WAERL,EACGM,aACAC,MAAK,SAACC,GAAD,OAASC,QAAQC,IAAIF,EAAK,yBAC/BG,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,EAAK,yBAChCC,SAAQ,WAEPb,EAASc,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAC7DlB,EAASmB,KAAK,QAAS,WAAY,QACnCf,EAAMJ,QAET,IAaD,qBAAKoB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wBAAQ1B,QAXO,WACnBF,EAAG2B,KACD,SACA,mCACAJ,OAAOC,SAASC,SAAWF,OAAOC,SAASE,SAOzC,mBACA,eAAC,IAAD,WACE,mBAAGG,KAAK,UAAR,oBACA,uBACA,mBAAGA,KAAK,UAAR,oBACA,uBACA,uBAEA,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAlB,UACE,cAAC,EAAD,IAAe,OAEjB,eAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAlB,UACE,cAAC,EAAD,IAAe,mBCzCdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dbe68b48.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useGA4React } from \"ga-4-react\";\r\n\r\nfunction AppOne() {\r\n  const ga = useGA4React(); // useGA4React() is a hook that returns the GA4React instance.\r\n  const ClickHandler = () => {\r\n    ga.event({\r\n      category: \"Button\",\r\n      action: \"Click the button from first page\",\r\n    });\r\n    alert(\r\n      \"Send the information to google analystic that I touched the click button\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      First Page\r\n      <br />\r\n      <button onClick={ClickHandler}>Click</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppOne;\r\n","import React from \"react\";\r\n\r\nfunction AppTwo() {\r\n  return <div>Second Page</div>;\r\n}\r\n\r\nexport default AppTwo;\r\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport AppOnePage from \"./AppOne\";\nimport AppTwoPage from \"./AppTwo\";\nimport GA4React, { useGA4React } from \"ga-4-react\";\nimport \"./App.css\";\n\nconst ga4react = new GA4React(\"G-QC2JW90KEH\");\n\nfunction App() {\n  const [ga, setGA] = useState();\n\n  //using useEffect to track pageviews with ga4react\n  useEffect(() => {\n    //initialize ga4react\n    ga4react\n      .initialize()\n      .then((res) => console.log(res, \"Analytics Success.\"))\n      .catch((err) => console.log(err, \"Analytics Failure.\"))\n      .finally(() => {\n        //track pageview\n        ga4react.pageview(window.location.pathname + window.location.search);\n        ga4react.gtag(\"event\", \"pageview\", \"path\"); // or your custom gtag event\n        setGA(ga4react);\n      });\n  }, []);\n\n  // const ga = useGA4React(); //useGA4React hook\n\n  const ClickHandler = () => {\n    ga.gtag(\n      \"Button\",\n      \"Click the button from first page\",\n      window.location.pathname + window.location.search\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={ClickHandler}>Click</button>\n        <Router>\n          <a href=\"/appOne\">AppOne</a>\n          <br />\n          <a href=\"/appTwo\">AppTwo</a>\n          <br />\n          <br />\n\n          <Routes>\n            <Route exact path=\"/appOne\">\n              <AppOnePage />{\" \"}\n            </Route>\n            <Route exact path=\"/appTwo\">\n              <AppTwoPage />{\" \"}\n            </Route>\n          </Routes>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}